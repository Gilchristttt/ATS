import streamlit as st
import spacy
import pdfplumber
from skill import *
from llm_helper import llm

from langchain_core.prompts import PromptTemplate

# Charger le mod√®le spaCy en fran√ßais
nlp = spacy.load("fr_core_news_sm")

# Liste des comp√©tences et niveaux d'√©tudes
competences_list = skills_list
niveaux_etudes = ['licence', 'master', 'doctorat', 'bac', 'bac+2', 'bac+5']

# Fonction pour extraire le texte d'un CV PDF
def extraire_texte_pdf(pdf_path):
    texte = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            texte += page.extract_text() or ""
    return texte

# Fonction pour extraire les informations
def extraire_informations(texte):
    doc = nlp(texte.lower())
    competences_trouvees = [c for c in competences_list if c in texte.lower()]
    niveau_etudes = [n for n in niveaux_etudes if n in texte.lower()]
    types_candidature = ['stage', 'alternance', 'cdi', 'cdd']
    type_candidature = [t for t in types_candidature if t in texte.lower()]
    return {"competences": competences_trouvees, "niveau_etudes": niveau_etudes, "type_candidature": type_candidature}

# Fonction de calcul du score ATS
def calculer_score_competences(competences_cv, competences_offre):
    if not competences_offre:
        return 0
    print(competences_cv)
    print(competences_offre)
    intersect_competences = [c for c in competences_cv if c in competences_offre]
    print(intersect_competences)
    
    return len(intersect_competences) / len(competences_offre)

# Fonction d'affichage esth√©tique
def afficher_recommandations(score):
    if score >= 0.8:
        st.success("üéØ F√©licitations ! Votre CV correspond tr√®s bien √† l'offre. Vous pouvez postuler en toute confiance. ‚úîÔ∏è")
        st.info("üí° Conseil : Ajoutez une lettre de motivation personnalis√©e pour renforcer votre candidature.")
    elif score >= 0.5:
        st.warning("‚ö†Ô∏è Votre CV pourrait n√©cessiter des am√©liorations pour maximiser vos chances.")
        st.write("üîπ **Conseils d'am√©lioration :**")
        st.write("- **Ajoutez des comp√©tences cl√©s** mentionn√©es dans l'offre si vous les poss√©dez.")
        st.write("- **Mettez en avant vos exp√©riences et certifications** en lien avec le poste.")
        st.write("- **Utilisez un format de CV clair et lisible** par les ATS.")
    else:
        st.error("‚ùå Ce poste ne semble pas correspondre √† votre profil.")
        st.write("üìå **Suggestions :**")
        st.write("- **Postulez √† des offres plus align√©es** avec vos comp√©tences.")
        st.write("- **Am√©liorez votre CV** en acqu√©rant de nouvelles comp√©tences via des formations en ligne.")

# Fonction pour g√©n√©rer une lettre de motivation
def generateur(texte_cv, description_offre, competences_cv):
    template = '''
    En te basant sur la description du poste, le texte de ton CV, et les comp√©tences mentionn√©es dans ton CV,
    cr√©e une lettre de motivation professionnelle et concise.

    1. Utilise la description du poste suivante : {description_offre}
    2. Utilise le texte de CV suivante : {texte_cv}
    3. Mets en avant les comp√©tences suivantes : {competences_cv}

    La lettre de motivation doit √™tre formelle, concise, et mettre en avant les comp√©tences du CV en lien avec le poste.
    Le but est de donner une impression positive et convaincante √† l'employeur potentiel.
    '''

    # Cr√©ation du template avec les valeurs pass√©es
    pt = PromptTemplate.from_template(template)
    
    # Pr√©paration des donn√©es d'entr√©e pour la cha√Æne de traitement
    chain = pt | llm
    response = chain.invoke(input={"texte_cv": texte_cv, "description_offre": description_offre, "competences_cv": competences_cv})
    
    return response.content


    
# Interface Streamlit
def main():
    #appliquer_css_personnalise()
    st.title("üìÑ ATS Checker : Testez votre CV contre une offre d'emploi")
    
    st.sidebar.header("üîç Analysez votre CV")
    cv_file = st.sidebar.file_uploader("üìÇ T√©l√©chargez votre CV (PDF)", type="pdf")
    description_offre = st.sidebar.text_area("‚úçÔ∏è Copiez la description de l'offre", height=150)
    
    if cv_file and description_offre:
        texte_cv = extraire_texte_pdf(cv_file)
        info_cv = extraire_informations(texte_cv)
        info_offre = extraire_informations(description_offre)
        score_competences = calculer_score_competences(info_cv['competences'], info_offre['competences'])
        
        if st.button("üìä Analyser le CV"):
            st.write("### üèÜ R√©sultats de l'analyse :")
            st.write(f"**üîπ Score ATS bas√© sur les comp√©tences : {score_competences * 100:.2f}%**")
            
            competences_post = [c for c in info_cv['competences'] if c in info_offre['competences']]
            if len(competences_post) >=1:
                st.write("### üõ†Ô∏è Comp√©tences que vous poss√©dez pour ce poste :")
                st.write("- " + "\n- ".join(competences_post))
            else:
                st.write("‚ùå Aucune comp√©tence correspondante trouv√©e dans votre CV.")
                
            
            afficher_recommandations(score_competences)
        
        if score_competences >0.8 :
            generer_lettre = st.selectbox(
                "Souhaitez-vous g√©n√©rer une lettre de motivation ?",
                options=["Non", "Oui"]
            )
            if generer_lettre == "Oui":
                # G√©n√©rer la lettre de motivation en fonction du post s√©lectionn√©
                lettre_motivation = generateur(texte_cv,description_offre, info_cv['competences'])
                st.subheader("Lettre de Motivation G√©n√©r√©e :")
                #st.text_area("Votre lettre de motivation", lettre_motivation, height=200)
                st.markdown(f"<div style='white-space: pre-wrap;'>{lettre_motivation}</div>", unsafe_allow_html=True)

            elif generer_lettre == "Non":
                st.write("Vous avez choisi de ne pas g√©n√©rer de lettre de motivation.")

if __name__ == "__main__":
    main()
